
function kalFilt(accx,accy,accz,waccx,waccy,ts)


% waccx=waccx./(180*pi);
% waccy=waccy./(180*pi);
% x'                y'
measures = [accx', accy',accz',zeros(length(accx),1),zeros(length(accx),1),waccx',waccy'];
measures=measures';

xPos =1;
yPos =0;
zPos =0;
vx=0;
vy=0;
vz=0;
ax=0;
ay=0;
az=0;
thx=0;
thy=0;
thz=0;
wx=0;
wy=0;
x=[...
    % x = [xPos, ... % xPosition
    %     yPos,  ... % yPosition
    %     zPos,  ... % zPosition
    %     vx,    ... % Geschwindigkeit in X-Richtung
    %     vy,    ... % Geschwindigkeit in Y-Richtung
    %     vz,    ... % Geschwindigkeit in Z-Richtung
    accx(1),    ... % Beschleunigung in X-Richtung
    accy(1),    ... % Beschleunigung in Y-Richtung
    accz(1),    ... % Beschleunigung in Z-Richtung
    thx,   ... % Winkel um X-Achse
    thy,   ... % Winkel um Y-Achse
    wx,    ... % Winkelgeschwindigkeit um X-Achse
    wy];    ... % Winkelgeschwindigkeit um Y-Achse
    x=x';



% Transition Matrix
% A= [1,0,0,ts,0,0,ts^2,0,0,0,0,0,0;
%     0,1,0,0,ts,0,0,ts^2,0,0,0,0,0;
%     0,0,1,0,0,ts,0,0,ts^2,0,0,0,0;
%     0,0,0,1,0,0,ts,0,0,0,0,0,0;
%     0,0,0,0,1,0,0,ts,0,0,0,0,0;
%     0,0,0,0,0,1,0,0,ts,0,0,0,0;
%     0,0,0,0,0,0,1,0,0,0,0,0,0;
%     0,0,0,0,0,0,0,1,0,0,0,0,0;
%     0,0,0,0,0,0,0,0,1,0,0,0,0;
%     0,0,0,0,0,0,0,0,0,1,0,ts,0;
%     0,0,0,0,0,0,0,0,0,0,1,0,ts;
%     0,0,0,0,0,0,0,0,0,0,0,1,0;
%     0,0,0,0,0,0,0,0,0,0,0,0,1];

A= [1,0,0,0,0,0,0;
    0,1,0,0,0,0,0;
    0,0,1,0,0,0,0;
    0,0,0,1,0,ts,0;
    0,0,0,0,1,0,ts;
    0,0,0,0,0,1,0;
    0,0,0,0,0,0,1];


% Noise Matrix
P=[1,0,0,0,0,0,0;
   0,1,0,0,0,0,0;
   0,0,1,0,0,0,0;
   0,0,0,1,0,0,0;
   0,0,0,0,1,0,0;
   0,0,0,0,0,1,0;
   0,0,0,0,0,0,1];

% P=eye(7)*0.001;


% G = [0.04,0.04,0.04,0.04^2,0.04^2,3,3];  
% Q=G'*G*0.001;
Q =[1,0,0,0,0,0,0;
    0,1,0,0,0,0,0;
    0,0,1,0,0,0,0;
    0,1,1,5,0,ts,0;
    1,0,1,05,5,0,ts;
    0,0,0,0,0,1,0;
    0,0,0,0,0,0,1];



%Measurement function
mThx = atan2(ay,az);
mThy = atan2(ax,az);

% y = [mThx, ... Winkel um X-Achse an Hand Beschleunigungsdaten
%     mThy, ... Winkel um Y-Achse an Hand Beschleunigungsdaten
%     mX,    ...  aus Zustands�bergang abgeleitete neue X-Position
%     mY,    ...  aus Zustands�bergang abgeleitete neue Y-Position
%     mZ];   ...  aus Zustands�bergang abgeleitete neue Z-Position

% H = [0,0,0,0,0,0,1,0,0,0,0,0,0;      % gemessene Beschleunigung in X-Richtung
%      0,0,0,0,0,0,0,1,0,0,0,0,0;      % gemessene Beschleunigung in Y-Richtung
%      0,0,0,0,0,0,0,0,1,0,0,0,0;      % gemessene Beschleunigung in Z-Richtung
%      0,0,0,0,0,0,0,0,0,mThx,0,0,0;   % Winkel um X-Achse aus Beschleunigungsdaten
%      0,0,0,0,0,0,0,0,0,0,mThy,0,0];  % Winkel um Y-Achse aus Beschleunigungsdaten

H = [1,0,0,0,0,0,0;      % gemessene Beschleunigung in X-Richtung
    0,1,0,0,0,0,0;      % gemessene Beschleunigung in Y-Richtung
    0,0,1,0,0,0,0;      % gemessene Beschleunigung in Z-Richtung
    0,0,0,0,0,0,0;      % Winkel um X-Achse aus Beschleunigungsdaten
    0,0,0,0,0,0,0;
    0,0,0,0,0,1,0;
    0,0,0,0,0,0,1];     % Winkel um Y-Achse aus Beschleunigungsdaten




R =[0.0021,0,0,0,0,0,0;
    0,0.0021,0,0,0,0,0;
    0,0,0.0021,0,0,0,0;
    0,0,0,100,0,0,0;
    0,0,0,0,100,0,0;
    0,0,0,0,0,8,0;
    0,0,0,0,0,0,8];

% R=eye(7)*10;

I= eye(7);




x_dash=zeros(length(measures),7);
K_dash=zeros(length(measures),7);
x_dash(1,:)=x;
%% predict
for ii=2:length(measures);
    x=x_dash(ii-1,:)';
    x=A*x;      % Zustand pr�dizieren
    P=A*P*A'+Q; % Kovarianz pr�dizieren
    
    H=x;%[x(1),x(2),x(3),,x(6),x(7)]; % vorausberechnete Werte updaten
    J=updateJ(x);   % JacobiMatrix aktulaisieren
    
    %% Correction
    Z= measures(:,ii);
    Z(4)=180/pi*atan2(measures(2,ii),measures(3,ii));
    Z(5)=-180/pi*atan2(measures(1,ii),measures(3,ii));
    y=Z-H; % Innovation aus Differenz von Messerten und
    
    S=(J*P*J'+R);
    K=P*J'*inv(S); % Kalman Gain berechnen
     
    x=x+(K*y); %gemessene Werte mit vorausberechneten Werten verrechnen
    P=(I-(K*J))*P; % Kovarianzmatrix aktualisieren
    
    x_dash(ii,:)=x;
    
    % K_dash(ii,:)= K;
end


keyboard;

